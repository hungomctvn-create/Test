Hướng dẫn cài đặt YOLO và OpenCV trên VirtualBox
Lý do chọn hệ điều hành

Raspberry Pi OS Bullseye i386 (32-bit): Phù hợp nếu bạn muốn giữ nguyên phiên bản 2022-07-01-raspios-bullseye-i386. Tuy nhiên, PyTorch (yêu cầu bởi YOLOv8) không hỗ trợ tốt 32-bit, nên cần dùng ONNX Runtime với model YOLOv8 xuất sang ONNX.
Debian 12 Bookworm 64-bit: Khuyến nghị nếu bạn muốn môi trường 64-bit tương thích tốt hơn với PyTorch và YOLOv8, dễ cài đặt hơn và hiệu năng tốt hơn trên VirtualBox.

Gợi ý: Nếu bạn không bị ràng buộc bởi i386, hãy dùng Debian 12 64-bit để đơn giản hóa việc cài YOLOv8 với PyTorch.

Bước 1: Tải file cài đặt

Raspberry Pi OS Bullseye i386 (nếu dùng 32-bit):

Tải ISO từ raspberrypi.com (phiên bản 2022-07-01 hoặc mới hơn, ~2GB).
Lưu vào thư mục trên host, ví dụ: C:\RPi_Files\raspios.iso.


Debian 12 Bookworm 64-bit (khuyến nghị):

Tải ISO từ debian.org (chọn "netinst" ~400MB hoặc full DVD ~4GB với desktop).
Lưu vào C:\RPi_Files\debian.iso.


Chuẩn bị thư mục chia sẻ:

Tạo thư mục trên host: C:\RPi_Files\.
Đây sẽ chứa ISO, file .deb, wheel, và model YOLO/ONNX cho chế độ offline.




Bước 2: Cấu hình máy ảo trên VirtualBox

Tạo VM mới:

Mở VirtualBox > New > Name: "RPiOS" hoặc "Debian".
Type: Linux, Version: Debian (64-bit) hoặc Debian (32-bit) tùy OS.
RAM: 2GB+ (khuyến nghị 4GB nếu host mạnh).
Disk: Tạo VDI, dynamically allocated, 20GB+.


Cấu hình VM (VM > Settings):

System:

Motherboard: Chipset PIIX3 (legacy), Base Memory: 2048MB.
Processor: 1-2 CPU, Enable PAE/NX.


Display:

Screen: Video Memory 128MB, Enable 3D Acceleration (nếu host hỗ trợ).


Storage:

Controller: IDE, chọn Empty > Icon đĩa > Choose a disk file > Chọn file .iso đã tải.


Network:

Adapter 1: Enable, NAT (cho kết nối mạng ban đầu).


USB: Enable USB Controller 2.0 (nếu cần USB sau).
Shared Folders:

Devices > Shared Folders > Add shared folder.
Folder Path: C:\RPi_Files.
Folder Name: SharedOffline.
Check Auto-mount, Make Permanent.




Start VM:

Boot từ ISO, chọn Graphical Install.




Bước 3: Cài đặt hệ điều hành

Theo wizard cài đặt:

Language: English.
Location: United States (hoặc tùy chọn).
Keyboard: American English.
Hostname: raspberrypi hoặc debian.
Domain: Để trống.
Root Password: Đặt (ví dụ: raspberry).
User: Tạo user pi, password raspberry.
Partition: Guided - use entire disk, all files in one partition.
Desktop: Chọn GNOME hoặc LXDE (nhẹ, giống Raspberry Pi Desktop).
Software: Chọn SSH server (nếu cần remote), Desktop environment, Standard system utilities.


Hoàn tất:

Install GRUB boot loader.
Reboot sau khi cài xong, VM sẽ boot vào desktop với user pi.


Mount shared folder trong VM:

Mở Terminal:
bashsudo mkdir /mnt/shared
sudo mount -t vboxsf SharedOffline /mnt/shared

Để auto-mount sau reboot, chỉnh sửa /etc/fstab:
bashsudo nano /etc/fstab
Thêm dòng:
textSharedOffline /mnt/shared vboxsf defaults 0 0
Lưu (Ctrl+O, Enter, Ctrl+X).


Cài VirtualBox Guest Additions (tùy chọn, để chia sẻ clipboard/màn hình):

Devices > Insert Guest Additions CD image.
Trong VM:
bashsudo apt install build-essential dkms
sudo mount /dev/cdrom /mnt
cd /mnt
sudo sh ./VBox_GuestAdditions.run





Bước 4: Cập nhật hệ thống (Online/Offline)

Nếu có mạng (NAT):
bashsudo apt update && sudo apt upgrade -y
sudo apt install python3-pip python3-venv build-essential -y

Offline:

Trên host (có mạng), tải các gói .deb từ packages.debian.org (hoặc bookworm/amd64 nếu dùng 64-bit):
bashapt download python3-pip python3-venv build-essential

Copy file .deb vào C:\RPi_Files.
Trong VM:
bashcd /mnt/shared
sudo dpkg -i *.deb
sudo apt --fix-broken install -y





Bước 5: Cài OpenCV offline
OpenCV 4.8.1 là phiên bản ổn định, phù hợp cho cả 32-bit và 64-bit. Dưới đây là cách build từ source (khuyến nghị cho 32-bit) hoặc dùng wheel (dễ hơn cho 64-bit).
Phương án 1: Build từ source (32-bit/64-bit)

Tải file trên host:

OpenCV: Từ github.com/opencv/opencv, tải opencv-4.8.1.zip (~50MB).
Contrib (tùy chọn): Từ github.com/opencv/opencv_contrib, tải opencv_contrib-4.8.1.zip.
Dependencies (.deb từ packages.debian.org):
textbuild-essential, cmake, pkg-config, libgtk-3-dev, libavcodec-dev, libavformat-dev,
libswscale-dev, libv4l-dev, libxvidcore-dev, libx264-dev, libjpeg-dev, libpng-dev,
libtiff-dev, gfortran, openexr, libatlas-base-dev, python3-dev, python3-numpy

Giải nén opencv-4.8.1.zip và opencv_contrib-4.8.1.zip vào C:\RPi_Files\opencv_src.


Chuyển và cài dependencies trong VM:
bashcd /mnt/shared
sudo dpkg -i *.deb
sudo apt --fix-broken install -y

Build OpenCV:
bashcd /mnt/shared
unzip opencv-4.8.1.zip
unzip opencv_contrib-4.8.1.zip
cd opencv-4.8.1
mkdir build && cd build
cmake -D CMAKE_BUILD_TYPE=RELEASE \
      -D CMAKE_INSTALL_PREFIX=/usr/local \
      -D INSTALL_PYTHON_EXAMPLES=ON \
      -D INSTALL_C_EXAMPLES=OFF \
      -D OPENCV_ENABLE_NONFREE=ON \
      -D OPENCV_EXTRA_MODULES_PATH=../../opencv_contrib-4.8.1/modules \
      -D PYTHON_EXECUTABLE=$(which python3) \
      -D BUILD_EXAMPLES=ON ..
make -j1  # Dùng 1 core để tránh crash
sudo make install
sudo ldconfig

Kiểm tra:
bashpython3 -c "import cv2; print(cv2.__version__)"
Kết quả nên in: 4.8.1.

Phương án 2: Dùng wheel (khuyến nghị cho 64-bit):

Trên host, tải wheel từ pypi.org/project/opencv-python:

32-bit: opencv_python-4.8.1.78-cp39-cp39-linux_i686.whl.
64-bit: opencv_python-4.8.1.78-cp39-cp39-linux_x86_64.whl.
Tải thêm numpy (nếu chưa có): numpy-1.24.3-cp39-cp39-linux_i686.whl hoặc linux_x86_64.whl.


Copy vào C:\RPi_Files.
Trong VM:
bashpip3 install /mnt/shared/numpy-*.whl
pip3 install /mnt/shared/opencv_python-*.whl

Kiểm tra: python3 -c "import cv2; print(cv2.__version__)".


Bước 6: Cài YOLOv8 offline
YOLOv8 (từ Ultralytics) yêu cầu PyTorch, nhưng PyTorch không hỗ trợ tốt 32-bit. Với 32-bit, sử dụng ONNX Runtime với model YOLOv8 xuất sang ONNX là cách tối ưu. Với 64-bit, có thể cài full PyTorch.
Phương án 1: YOLOv8 với ONNX Runtime (32-bit/64-bit)

Trên host (có mạng):

Tải model YOLOv8:

Từ github.com/ultralytics/ultralytics, tải yolov8n.pt (nano model, ~6MB).


Export sang ONNX:
bashpip install ultralytics
python3 -c "from ultralytics import YOLO; model = YOLO('yolov8n.pt'); model.export(format='onnx')"
Kết quả: yolov8n.onnx.
Tải ONNX Runtime:

Từ pypi.org/project/onnxruntime, chọn:

32-bit: onnxruntime-1.16.3-cp39-cp39-linux_i686.whl.
64-bit: onnxruntime-1.16.3-cp39-cp39-linux_x86_64.whl.




Tải numpy (nếu chưa có): numpy-1.24.3-cp39-cp39-linux_i686.whl hoặc linux_x86_64.whl.
Copy yolov8n.onnx, wheel files vào C:\RPi_Files\yolo_offline.


Trong VM:
bashcd /mnt/shared/yolo_offline
pip3 install numpy-*.whl
pip3 install onnxruntime-*.whl

Test inference:

Copy ảnh mẫu (ví dụ: test.jpg) vào C:\RPi_Files\yolo_offline.
Tạo file test_yolo.py:
pythonimport onnxruntime as ort
import numpy as np
import cv2

# Load model
session = ort.InferenceSession('/mnt/shared/yolo_offline/yolov8n.onnx')
input_name = session.get_inputs()[0].name

# Load and preprocess image
img = cv2.imread('/mnt/shared/yolo_offline/test.jpg')
img = cv2.resize(img, (640, 640))
img = img.transpose(2, 0, 1).astype(np.float32) / 255.0
img = np.expand_dims(img, 0)

# Run inference
outputs = session.run(None, {input_name: img})
print("Detection outputs:", outputs[0].shape)  # In ra shape của boxes, classes

Chạy: python3 test_yolo.py.



Phương án 2: Full YOLOv8 với PyTorch (chỉ 64-bit)

Trên host:

Tải wheel PyTorch (CPU): download.pytorch.org/whl/torch, chọn torch-2.0.0+cpu-cp39-cp39-linux_x86_64.whl.
Tải ultralytics: pypi.org/project/ultralytics, chọn ultralytics-8.0.196-cp39-cp39-linux_x86_64.whl.
Tải dependencies: tqdm, requests, pandas, pyyaml (wheels từ PyPI).
Copy vào C:\RPi_Files\yolo_offline.


Trong VM:
bashcd /mnt/shared/yolo_offline
pip3 install *.whl --no-deps
pip3 install /mnt/shared/yolo_offline/tqdm-*.whl /mnt/shared/yolo_offline/requests-*.whl /mnt/shared/yolo_offline/pandas-*.whl /mnt/shared/yolo_offline/pyyaml-*.whl

Test YOLOv8:
pythonfrom ultralytics import YOLO
model = YOLO('/mnt/shared/yolo_offline/yolov8n.pt')
results = model('/mnt/shared/yolo_offline/test.jpg')
results[0].show()  # Hiển thị kết quả detection



Lưu ý và xử lý lỗi

32-bit hạn chế: PyTorch không hỗ trợ 32-bit, nên ONNX là lựa chọn tốt nhất. Nếu cần full YOLOv8, chuyển sang Debian 64-bit.
Build OpenCV chậm: Nếu VM crash khi build, giảm số core (make -j1) hoặc tăng RAM.
Lỗi thiếu dependencies: Kiểm tra log dpkg hoặc pip, tải thêm .deb/wheel từ packages.debian.org hoặc PyPI.
Kiểm tra log lỗi: Nếu gặp vấn đề (build fail, import lỗi), chạy lệnh và gửi output log để tôi hỗ trợ.


Kết luận

Raspberry Pi OS Bullseye i386: Dùng ONNX Runtime cho YOLOv8, build OpenCV từ source.
Debian 12 64-bit: Cài trực tiếp YOLOv8 với PyTorch, OpenCV qua wheel, đơn giản và hiệu quả hơn.
Nếu cần file .deb/wheel cụ thể hoặc gặp lỗi, cung cấp chi tiết để tôi hướng dẫn thêm!



Kiểm tra phiên bản GCC:

Xác nhận phiên bản GCC:
textg++ --version

Đầu ra trước đó cho thấy GCC 10.2.1, vốn hỗ trợ C++11. Nếu phiên bản thấp hơn (ví dụ: dưới 4.8), cần nâng cấp GCC:
textsudo apt update
sudo apt install g++ gcc



Chạy lại quá trình biên dịch:

Sau khi cấu hình lại bằng cmake, biên dịch:
textmake -j4

Nếu thành công, cài đặt:
textsudo make install



Kiểm tra lỗi khác (nếu có):

Nếu lỗi vẫn xảy ra, kiểm tra log chi tiết:
textcat /mnt/shared/opencv-4.8.1/build/CMakeFiles/CMakeOutput.log

Đảm bảo thư mục ../opencv_contrib-4.8.1/modules tồn tại và chứa module bổ sung.


Tối ưu hóa tài nguyên:

Nếu biên dịch bị gián đoạn do tài nguyên hạn chế (Raspberry Pi có thể yếu), giảm số job:
textmake -j2




Lưu ý

Thời gian hiện tại: 02:03 PM +07, ngày 28/09/2025. Đảm bảo máy ảo đồng bộ thời gian.
Dung lượng: Kiểm tra không gian lưu trữ:
textdf -h
Đảm bảo còn đủ dung lượng (OpenCV cần vài trăm MB).

